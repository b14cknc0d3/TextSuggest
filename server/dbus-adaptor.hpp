
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__org_textsuggest_server_adaptor__ADAPTOR_MARSHAL_H
#define __dbusxx__org_textsuggest_server_adaptor__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace textsuggest {

class server_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    server_adaptor()
    : ::DBus::InterfaceAdaptor("org.textsuggest.server")
    {
        register_method(server_adaptor, load_custom_words, _load_custom_words_stub);
        register_method(server_adaptor, load_ignore_list, _load_ignore_list_stub);
        register_method(server_adaptor, reload_configs, _reload_configs_stub);
        register_method(server_adaptor, get_suggestions, _get_suggestions_stub);
        register_method(server_adaptor, get_all_words, _get_all_words_stub);
        register_method(server_adaptor, get_custom_words_only, _get_custom_words_only_stub);
        register_method(server_adaptor, type_text, _type_text_stub);
        register_method(server_adaptor, history_increment, _history_increment_stub);
        register_method(server_adaptor, history_remove, _history_remove_stub);
        register_method(server_adaptor, ignore_list_add, _ignore_list_add_stub);
        register_method(server_adaptor, process_suggestion, _process_suggestion_stub);
        register_method(server_adaptor, get_clipboard_text, _get_clipboard_text_stub);
        register_method(server_adaptor, set_clipboard_text, _set_clipboard_text_stub);
        register_method(server_adaptor, get_focused_window_id, _get_focused_window_id_stub);
        register_method(server_adaptor, autoselect_current_word, _autoselect_current_word_stub);
        register_method(server_adaptor, get_selected_word, _get_selected_word_stub);
        register_method(server_adaptor, determine_language_from_keyboard_layout, _determine_language_from_keyboard_layout_stub);
        register_method(server_adaptor, history_score, _history_score_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const 
    {
        static ::DBus::IntrospectedArgument load_custom_words_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument load_ignore_list_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument reload_configs_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument get_suggestions_args[] = 
        {
            { "word", "s", true },
            { "languages", "as", true },
            { 0, "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument get_all_words_args[] = 
        {
            { "languages", "as", true },
            { 0, "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument get_custom_words_only_args[] = 
        {
            { "word", "s", true },
            { 0, "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument type_text_args[] = 
        {
            { "text", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument history_increment_args[] = 
        {
            { "word", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument history_remove_args[] = 
        {
            { "word", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument ignore_list_add_args[] = 
        {
            { "word", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument process_suggestion_args[] = 
        {
            { "suggestion", "s", true },
            { 0, "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument get_clipboard_text_args[] = 
        {
            { 0, "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument set_clipboard_text_args[] = 
        {
            { "text", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument get_focused_window_id_args[] = 
        {
            { 0, "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument autoselect_current_word_args[] = 
        {
            { "mode", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument get_selected_word_args[] = 
        {
            { 0, "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument determine_language_from_keyboard_layout_args[] = 
        {
            { 0, "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument history_score_args[] = 
        {
            { "text", "s", true },
            { 0, "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod server_adaptor_methods[] = 
        {
            { "load_custom_words", load_custom_words_args },
            { "load_ignore_list", load_ignore_list_args },
            { "reload_configs", reload_configs_args },
            { "get_suggestions", get_suggestions_args },
            { "get_all_words", get_all_words_args },
            { "get_custom_words_only", get_custom_words_only_args },
            { "type_text", type_text_args },
            { "history_increment", history_increment_args },
            { "history_remove", history_remove_args },
            { "ignore_list_add", ignore_list_add_args },
            { "process_suggestion", process_suggestion_args },
            { "get_clipboard_text", get_clipboard_text_args },
            { "set_clipboard_text", set_clipboard_text_args },
            { "get_focused_window_id", get_focused_window_id_args },
            { "autoselect_current_word", autoselect_current_word_args },
            { "get_selected_word", get_selected_word_args },
            { "determine_language_from_keyboard_layout", determine_language_from_keyboard_layout_args },
            { "history_score", history_score_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod server_adaptor_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty server_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface server_adaptor_interface = 
        {
            "org.textsuggest.server",
            server_adaptor_methods,
            server_adaptor_signals,
            server_adaptor_properties
        };
        return &server_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual void load_custom_words() = 0;
    virtual void load_ignore_list() = 0;
    virtual void reload_configs() = 0;
    virtual std::vector< std::string > get_suggestions(const std::string& word, const std::vector< std::string >& languages) = 0;
    virtual std::vector< std::string > get_all_words(const std::vector< std::string >& languages) = 0;
    virtual std::vector< std::string > get_custom_words_only(const std::string& word) = 0;
    virtual void type_text(const std::string& text) = 0;
    virtual void history_increment(const std::string& word) = 0;
    virtual void history_remove(const std::string& word) = 0;
    virtual void ignore_list_add(const std::string& word) = 0;
    virtual std::string process_suggestion(const std::string& suggestion) = 0;
    virtual std::string get_clipboard_text() = 0;
    virtual void set_clipboard_text(const std::string& text) = 0;
    virtual std::string get_focused_window_id() = 0;
    virtual void autoselect_current_word(const std::string& mode) = 0;
    virtual std::string get_selected_word() = 0;
    virtual std::string determine_language_from_keyboard_layout() = 0;
    virtual int32_t history_score(const std::string& text) = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _load_custom_words_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        load_custom_words();
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _load_ignore_list_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        load_ignore_list();
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _reload_configs_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        reload_configs();
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _get_suggestions_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::vector< std::string > argin2; ri >> argin2;
        std::vector< std::string > argout1 = get_suggestions(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _get_all_words_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< std::string > argin1; ri >> argin1;
        std::vector< std::string > argout1 = get_all_words(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _get_custom_words_only_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::vector< std::string > argout1 = get_custom_words_only(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _type_text_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        type_text(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _history_increment_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        history_increment(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _history_remove_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        history_remove(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _ignore_list_add_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        ignore_list_add(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _process_suggestion_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argout1 = process_suggestion(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _get_clipboard_text_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argout1 = get_clipboard_text();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _set_clipboard_text_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        set_clipboard_text(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _get_focused_window_id_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argout1 = get_focused_window_id();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _autoselect_current_word_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        autoselect_current_word(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _get_selected_word_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argout1 = get_selected_word();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _determine_language_from_keyboard_layout_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argout1 = determine_language_from_keyboard_layout();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _history_score_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        int32_t argout1 = history_score(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

} } 
#endif //__dbusxx__org_textsuggest_server_adaptor__ADAPTOR_MARSHAL_H
