
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__dbus_interface_hpp__PROXY_MARSHAL_H
#define __dbusxx__dbus_interface_hpp__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace textsuggest {

class server_proxy
: public ::DBus::InterfaceProxy
{
public:

    server_proxy()
    : ::DBus::InterfaceProxy("org.textsuggest.server")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void load_custom_words()
    {
        ::DBus::CallMessage call;
        call.member("load_custom_words");
        ::DBus::Message ret = invoke_method (call);
    }

    void load_ignore_list()
    {
        ::DBus::CallMessage call;
        call.member("load_ignore_list");
        ::DBus::Message ret = invoke_method (call);
    }

    void reload_configs()
    {
        ::DBus::CallMessage call;
        call.member("reload_configs");
        ::DBus::Message ret = invoke_method (call);
    }

    std::vector< std::string > get_suggestions(const std::string& word, const std::vector< std::string >& languages)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << word;
        wi << languages;
        call.member("get_suggestions");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< std::string > argout;
        ri >> argout;
        return argout;
    }

    std::vector< std::string > get_all_words(const std::vector< std::string >& languages)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << languages;
        call.member("get_all_words");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< std::string > argout;
        ri >> argout;
        return argout;
    }

    std::vector< std::string > get_custom_words_only(const std::string& word)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << word;
        call.member("get_custom_words_only");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< std::string > argout;
        ri >> argout;
        return argout;
    }

    void type_text(const std::string& text)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << text;
        call.member("type_text");
        ::DBus::Message ret = invoke_method (call);
    }

    void history_increment(const std::string& word)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << word;
        call.member("history_increment");
        ::DBus::Message ret = invoke_method (call);
    }

    void history_remove(const std::string& word)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << word;
        call.member("history_remove");
        ::DBus::Message ret = invoke_method (call);
    }

    void ignore_list_add(const std::string& word)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << word;
        call.member("ignore_list_add");
        ::DBus::Message ret = invoke_method (call);
    }

    std::string process_suggestion(const std::string& suggestion)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << suggestion;
        call.member("process_suggestion");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    std::string get_clipboard_text()
    {
        ::DBus::CallMessage call;
        call.member("get_clipboard_text");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    void set_clipboard_text(const std::string& text)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << text;
        call.member("set_clipboard_text");
        ::DBus::Message ret = invoke_method (call);
    }

    std::string get_focused_window_id()
    {
        ::DBus::CallMessage call;
        call.member("get_focused_window_id");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    void autoselect_current_word(const std::string& mode)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << mode;
        call.member("autoselect_current_word");
        ::DBus::Message ret = invoke_method (call);
    }

    std::string get_selected_word()
    {
        ::DBus::CallMessage call;
        call.member("get_selected_word");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    std::string determine_language_from_keyboard_layout()
    {
        ::DBus::CallMessage call;
        call.member("determine_language_from_keyboard_layout");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    int32_t history_score(const std::string& text)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << text;
        call.member("history_score");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } 
#endif //__dbusxx__dbus_interface_hpp__PROXY_MARSHAL_H
